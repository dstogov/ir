--TEST--
002: ARGVAL:
--ARGS--
--run
--CODE--
extern func @memcpy(uintptr_t, uintptr_t, uint64_t): uintptr_t;
extern func @memset(uintptr_t, int32_t, uint64_t): uintptr_t;
func @main(): int32_t;
extern func @printf(uintptr_t, ...): void;
func @test(uintptr_t, ...): int32_t;
static const @str.1[1] = "\000";
static const @str.2[7] = "%d %d\n\000";
func @main(): int32_t
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	uintptr_t c_4 = 24;
	int32_t c_5 = 1;
	uintptr_t c_6 = 8;
	int32_t c_7 = 2;
	uintptr_t c_8 = 16;
	int32_t c_9 = 3;
	uintptr_t c_10 = func @test(uintptr_t, ...): int32_t;
	uintptr_t c_11 = sym(@str.1);
	uintptr_t c_12 = func @printf(uintptr_t, ...): void;
	uintptr_t c_13 = sym(@str.2);
	int32_t c_14 = 0;
#BB1: end=l_19
	l_1 = START(l_19);
	uintptr_t d_2, l_2 = ALLOCA(l_1, c_4);
	l_3 = STORE(l_2, d_2, c_5);
	uintptr_t d_4 = ADD(d_2, c_6);
	l_5 = STORE(l_3, d_4, c_7);
	uintptr_t d_6 = ADD(d_2, c_8);
	l_7 = STORE(l_5, d_6, c_9);
	uintptr_t d_8 = ARGVAL(d_2, 24, 8);
	int32_t d_9, l_9 = CALL/2(l_7, c_10, c_11, d_8);
	int32_t d_11, l_11 = LOAD(l_9, d_2);
	int32_t d_12, l_12 = LOAD(l_11, d_4);
	int32_t d_13 = ADD(d_12, d_11);
	int32_t d_14, l_14 = LOAD(l_12, d_6);
	int32_t d_15 = ADD(d_14, d_13);
	l_17 = CALL/3(l_14, c_12, c_13, d_9, d_15);
	l_19 = RETURN(l_17, c_14);
}
func @test(uintptr_t, ...): int32_t
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	uintptr_t c_4 = 24;
	int32_t c_5 = 0;
	uintptr_t c_6 = func @memset(uintptr_t, int32_t, uintptr_t): uintptr_t;
	uintptr_t c_7 = func @memcpy(uintptr_t, uintptr_t, uintptr_t): uintptr_t;
	uintptr_t c_8 = 8;
	uintptr_t c_9 = 16;
	int32_t c_10 = 42;
#BB1: end=l_20
	l_1 = START(l_20);
	uintptr_t d_2 = PARAM(l_1, "s", 1);
	uintptr_t d_3, l_3 = ALLOCA(l_1, c_4);
	l_4 = VA_START(l_3, d_3);
	uintptr_t d_5, l_5 = ALLOCA(l_4, c_4);
	l_6 = CALL/3(l_5, c_6, d_5, c_5, c_4);
	uintptr_t d_8, l_8 = VA_ARG(l_6, d_3, 195); # 195 = ((24) << 3) | log2(8) ; 24 - size, 8 - align
	l_9 = CALL/3(l_8, c_7, d_5, d_8, c_4);
	uintptr_t d_11 = ADD(d_5, c_8);
	int32_t d_12, l_12 = LOAD(l_9, d_5);
	int32_t d_13, l_13 = LOAD(l_12, d_11);
	int32_t d_14 = ADD(d_13, d_12);
	uintptr_t d_15 = ADD(d_5, c_9);
	int32_t d_16, l_16 = LOAD(l_13, d_15);
	int32_t d_17 = ADD(d_16, d_14);
	l_19 = STORE(l_16, d_11, c_10);
	l_20 = RETURN(l_19, d_17);
}
--EXPECT--
6 6
